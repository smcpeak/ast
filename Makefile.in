# Makefile.in for ast
# see license.txt for copyright and terms of use

# main targets
all: ccsstr astgen libast.a example.o ext1.o


# directories of other software
SMBASE    := @SMBASE@
LIBSMBASE := $(SMBASE)/libsmbase.a

SMFLEXDIR := ../smflex
SMFLEX    := $(SMFLEXDIR)/smflex


# external tools
PERL := @PERL@


# C++ compiler, etc.
CXX := $(CXX)

# flags for the C and C++ compilers (and preprocessor)
CCFLAGS := @CCFLAGS@ -I$(SMBASE)

# flags for the linker
LDFLAGS := -g -Wall $(LIBSMBASE)


# some other tools
AR     := ar
RANLIB := ranlib


# compile .cc to .o
%.o: %.cc
	$(CXX) -c -o $@ $< $(CCFLAGS)
	@perl $(SMBASE)/depend.pl -o $@ $< $(CCFLAGS) > $*.d


# remake the generated Makefile if its inputs have changed
Makefile: Makefile.in config.status
	./config.status

# reconfigure if the configure script has changed
config.status: configure.pl $(SMBASE)/sm_config.pm
	./config.status -reconfigure


# ---------------------- intermediate files -------------------
# Run bison.  I am currently using bison-3.0.4.
#
# This uses a pattern rule instead of a normal rule because pattern
# rules with multiple targets mean that a single rule creates multiple
# files, whereas a normal rule with multiple targets is shorthand for
# multiple independent rules, which breaks with parallel make.
#
# There is also the "&:" separator, but that was only added in GNU
# Make 4.3 (2020-01-19), which is too recent for me to depend on.
%.tab.cc %.tab.h %.codes.h: %.y
	bison -d -v $*.y
	@#
	@# I will be compiling the output as C++.
	@#
	mv -f $*.tab.c $*.tab.cc
	@#
	@# This extracts the declaration of "enum yytokentype" and
	@# puts it into agrampar.codes.h.  That way I can use the
	@# token codes in the lexer without also having to declare
	@# everything that is in the YYSTYPE union.
	@#
	sed -n -e '/enum yytokentype/,/};/p' < $*.tab.h > $*.codes.h

# Run smflex.
%.yy.cc %.yy.h: %.lex
	$(SMFLEX) -o$*.yy.cc $*.lex


# ------------------------- ccsstr ---------------------
CCSSTR_OBJS := \
  reporterr.o \
  embedded.o

ccsstr: ccsstr.cc ccsstr.h $(CCSSTR_OBJS)
	$(CXX) -o $@ -DTEST_CCSSTR $(CCFLAGS) ccsstr.cc $(CCSSTR_OBJS) $(LDFLAGS)


# ------------------------- astgen ---------------------
ASTGEN_OBJS := \
  gramlex.o \
  agrampar.tab.o \
  ccsstr.o \
  agramlex.yy.o \
  reporterr.o \
  embedded.o \
  ast.hand.o \
  asthelp.o \
  xmlhelp.o \
  agrampar.o  \
  astgen.o
-include $(ASTGEN_OBJS:.o=.d)

# ast.ast.cc is a dependency here but not explicitly in the command
# line because ast.hand.cc #includes it
astgen: $(ASTGEN_OBJS) ast.ast.cc $(LIBSMBASE)
	$(CXX) -o astgen $(ASTGEN_OBJS) $(LDFLAGS)

# Dependencies on generated headers.
agrampar.tab.o: ast.hand.h ast.ast.h agrampar.h
gramlex.o: agramlex.yy.h


# ---------------------- run astgen ----------------------
# simple ast spec file
example.cc: astgen example.ast
	./astgen example.ast

exampletest: exampletest.o example.o asthelp.o locstr.o $(LIBSMBASE)
	$(CXX) -o $@ $^

# simple extension
ext1.cc: astgen example.ast ext1.ast
	./astgen -oext1 example.ast ext1.ast

# If you want to regenerate astgen's own ast file, you do
#   ./astgen -oast.ast ast.ast
#
# This rule is *not* in the Makefile because if you do it
# without thinking you can break the self-bootstrapping
# (and be forced to restore your ast.ast.{cc,h} from the
# distribution tarball or from CVS).


# ------------------------ libast.a -------------------
# this library is the set of support modules required for
# using astgen-generated code, or are simply useful generally
# but don't belong in smbase
LIB_OBJS := \
  gramlex.o \
  ccsstr.o \
  reporterr.o \
  embedded.o \
  asthelp.o \
  xmlhelp.o \
  locstr.o
-include $(ASTGEN_OBJS:.o=.d)

libast.a: $(LIB_OBJS)
	$(AR) -r $@ $(LIB_OBJS)
	-$(RANLIB) $@


# ------------------ documentation ------------------
gendoc:
	mkdir gendoc

gendoc/configure.txt: configure
	./configure --help >$@

gendoc/demo.h gendoc/demo.cc: demo.ast astgen
	./astgen -ogendoc/demo demo.ast

.PHONY: doc
doc: gendoc gendoc/configure.txt gendoc/demo.h
	@echo "built documentation"


# ------------------------ misc ---------------------
check: ccsstr
	./ccsstr

# delete outputs of compiler, linker
clean:
	rm -f *.o tmp *.d gmon.out
	rm -f agrampar astgen ccsstr towner exampletest libast.a
	rm -f agrampar.output
	rm -f example.{h,cc} ext1.{h,cc}
	rm -f agramlex.yy.{h,cc}

# return to pristine checked-out state
distclean: clean
	rm -f Makefile config.status config.summary
	rm -rf gendoc

# 'clean', plus remove distributed outputs of bison
toolclean: clean
	rm -f agrampar.tab.h
	rm -f agrampar.tab.cc
	rm -f agrampar.codes.h

# test for owner
towner: owner.h towner.o
	$(CXX) -o towner towner.o $(LDFLAGS)
